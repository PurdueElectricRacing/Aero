function [] = CreateDAT(InputFileName, OutputFileName, AngleOfAttack)
%%
% CreateDAT(InputFileName, OutputFileName, AngleOfAttack)
%   Converts and scales coordinate data exported from SolidWorks into a usable .dat file for the hotwire machine
%   
%   Takes three (3) input arguments: 
%       InputFileName - The name of the file to be imported, including the .txt extension
%       OutputFileName - The name of the .dat file which is to be produced by the program
%       AngleOfAttack - The angle of attack for the airfoil (in degrees), taken from NACA website
%
%   Note: The data is exported from CAD as an IGES file. The .igs extension must be manually changed to .txt

%%

%-----------------------------------

%% CRAZY MATLAB-GENERATED FILE READING STATEMENTS (this is beyond my paygrade)

filename = InputFileName;
delimiter = ',';
startRow = 5;

% Read columns of data as text:
formatSpec = '%s%s%s%[^\n\r]';

% Open the text file.
fileID = fopen(filename,'r');

% Read columns of data according to the format.
%  This call is based on the structure of the file used to generate this
%  code. If an error occurs for a different file, try regenerating the code
%  from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

% Close the text file.
fclose(fileID);

% Convert the contents of columns containing numeric text to numbers.
%  Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end

% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

% Create output variable
AirfoilData = cell2mat(raw);
% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp R;

%% END FILE IMPORT

%-----------------------------------

%% REMOVE METADATA AND SELECT ACTUAL COORDINATE VALUES

%Finds row indices of only the numerical data
ValidIndex = find(abs(AirfoilData(:,2)>=0));
%Creates new matrix with only the numerical data
NewAirfoilData = AirfoilData(ValidIndex,:);
%Finds row indices of only the coordinate data
CoordData = find(AirfoilData(ValidIndex,1)==116);
%Creates new matrix with only the coordinate data [x, y]
OGAirfoilCoords = NewAirfoilData(CoordData, 2:3);

%% LINEAR TRANSFORMATIONS AND SCALING TO MAKE DATA USABLE BY HOTWIRE MACHINE

%Adjusts Angle of Attack value from input based on an equation generated by Ayush in excel so that it
% will correct the angle of the airfoil so that it lies horizontally
OutputAngle = -0.9943*(AngleOfAttack*(pi/180)) + 0.0149;
%Finds the maximum point in the data (the Trailing Edge point)
TrailingEdgePoint = OGAirfoilCoords(find(OGAirfoilCoords==max(OGAirfoilCoords(:,1))), :);
%Translates all of the data so that the Trailing Edge point is at the origin
LeftPushCoords = OGAirfoilCoords - TrailingEdgePoint;
%Reflects all of the data across the y-axis
InvertCoords = [-1*LeftPushCoords(:,1), LeftPushCoords(:,2)];
%Uses the adjusted Angle of Attack to rotate all of the data so that the airfoil is perfectly horizontal
TiltedCoords = [((cos(OutputAngle)*InvertCoords(:,1))+(sin(OutputAngle)*InvertCoords(:,2))), ((-1*sin(OutputAngle)*InvertCoords(:,1))+(cos(OutputAngle)*InvertCoords(:,2)))];
%Reflects all of the data across the y-axis again
InvertCoords2 = [-1*TiltedCoords(:,1), TiltedCoords(:,2)];
%Finds the minimum point in the data (the Leading Edge point)
LeadingEdgePoint = InvertCoords2(find(InvertCoords2==min(InvertCoords2(:,1))), :);
%Translates all of the data so that the Leading Edge point is at the origin
OriginPushCoords = [InvertCoords2(:,1) - LeadingEdgePoint(:,1), InvertCoords2(:,2) - LeadingEdgePoint(:,2)];
%Scales all of the data so that -1<y<1 and 0<x<1
ScaledCoords = [(OriginPushCoords(:,1)/max(OriginPushCoords(:,1))), (OriginPushCoords(:,2)/max(OriginPushCoords(:,1)))];

%% PLOT DATA TO VERIFY SHAPE
figure(1)
plot(ScaledCoords(:,1),ScaledCoords(:,2),'k.')
axis([0, 1, -.5, .5])
title(OutputFileName)
grid on

%% EXPORT TO .DAT FILE

% OutputFileName = 'Airfoil 1 Data 2'; % Filename test (Use as input
% variable) [DELETE SOON]

FileName = sprintf('%s.dat',OutputFileName);

fid = fopen(FileName, 'wt');

for n = 1:size(ScaledCoords,1)
    fprintf(fid, '  %0.5f', ScaledCoords(n,1));
    fprintf(fid, '  %0.5f', ScaledCoords(n,2));
    fprintf(fid, '\n');
end 
fclose(fid);
